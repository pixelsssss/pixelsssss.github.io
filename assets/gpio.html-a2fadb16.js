import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as d,c as s,a as e,d as i,b as r,e as t}from"./app-5974d0f8.js";const u={},o=e("h2",{id:"_1-gpio使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-gpio使用","aria-hidden":"true"},"#"),i(" 1. GPIO使用")],-1),c=e("h3",{id:"_1-1-简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-1-简介","aria-hidden":"true"},"#"),i(" 1.1 简介")],-1),p=e("p",null,"GPIO, 全称 General-Purpose Input/Output（通用输入输出），是一种软件运行期间能够动态配置和控制的通用引脚。 所有的 GPIO 在上电后的初始状态都是输入模式，可以通过软件设为上拉或下拉，也可以设置为中断脚，驱动强度都是可编程的。其核心是填充 LW_GPIO_CHIP 的方法和参数，并调用 API_GpioChipAdd 注册到内核中。",-1),v={href:"https://docs.acoinfo.com/sylixos/driver/gpio/brief.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<h3 id="_1-2-gpio引脚计算" tabindex="-1"><a class="header-anchor" href="#_1-2-gpio引脚计算" aria-hidden="true">#</a> 1.2 GPIO引脚计算</h3><p>Core-3568J 有 5 组 GPIO bank：GPIO0-GPIO4，每组又以 A0A7, B0B7, C0C7, D0~D7 作为编号区分,常用以下公式计算引脚：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GPIO pin脚计算公式：pin = bank * 32 + number

GPIO 小组编号计算公式：number = group * 8 + X
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面演示GPIO4_D5 pin脚计算方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bank = 4;       //GPIO4_D5 =&gt; 4, bank ∈ [0,4]
group = 3;      //GPIO4_D5 =&gt; 3, group ∈ {(A=0), (B=1), (C=2), (D=3)}
X = 5;          //GPIO4_D5 =&gt; 5, X ∈ [0,7]

number = group * 8 + X = 3 * 8 + 5 = 29
pin = bank*32 + number= 4 * 32 + 29 = 157;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-输入输出" tabindex="-1"><a class="header-anchor" href="#_1-3-输入输出" aria-hidden="true">#</a> 1.3 输入输出</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LW_API INT              API_GpioRequestOne(UINT uiGpio, ULONG ulFlags, CPCHAR pcLabel);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>申请一个 GPIO 口</p><ul><li>uiGpio：上面算出来的 GPIO pin 脚号</li><li>ulFlags：需要设置的属性（输入、输出、中断等）</li><li>pcLabel：标签</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INT  API_GpioDirectionOutput (UINT uiGpio, INT iValue)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置指定 GPIO 为输出模式</p><ul><li>uiGpio：GPIO 号</li><li>iValue：1: 高电平 0: 低电平</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LW_API VOID             API_GpioSetValue(UINT uiGpio, INT iValue);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置指定 GPIO 的值</p><ul><li>GPIO 号</li><li>1: 高电平 0: 低电平</li></ul><h3 id="_1-4-中断" tabindex="-1"><a class="header-anchor" href="#_1-4-中断" aria-hidden="true">#</a> 1.4 中断</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LW_API ULONG            API_GpioSetupIrq(UINT uiGpio, BOOL bIsLevel, UINT uiType);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据指定 GPIO 号设置相应的外部中断, 并返回对应的 IRQ 号</p><ul><li>uiGpio：GPIO 号</li><li>bIsLevel：是否为电平触发</li><li>uiType：如果为电平触发, 1 表示高电平触发, 0 表示低电平触发；如果为边沿触发, 1 表示上升沿触发, 0 表示下降沿触发, 2 表示双边沿触发</li></ul>`,19);function _(m,b){const a=l("ExternalLinkIcon");return d(),s("div",null,[o,c,p,e("p",null,[i("本文只介绍一些常见的接口，详细的接口说明见"),e("a",v,[i("GPIO 驱动模型简介"),r(a)]),i("。")]),I])}const G=n(u,[["render",_],["__file","gpio.html.vue"]]);export{G as default};
