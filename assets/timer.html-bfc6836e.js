import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as d}from"./app-5974d0f8.js";const l={},r=d(`<h2 id="_1-timer使用" tabindex="-1"><a class="header-anchor" href="#_1-timer使用" aria-hidden="true">#</a> 1. timer使用</h2><h3 id="_1-1-简介" tabindex="-1"><a class="header-anchor" href="#_1-1-简介" aria-hidden="true">#</a> 1.1 简介</h3><p>AIO-3568J 支持 arm 私有定时器和处理器外部定时器。私有定时器作为系统 tick 使用。</p><p>外部定时器是一个可编程的定时器外设。此组件是一个APB从属设备。有6个计时器（计时器0-5）和2个安全计时器（定时器0-1）。CNTPCT_EL0由STimer1提供。</p><ul><li>计时器5和STimer0-1从零计数到编程值，当计数器达到编程值时产生中断。</li><li>计时器0-4从编程值降为零，当计数器达到零时产生中断。</li></ul><p>计时器支持以下功能：</p><ul><li>计时器05用于不安全，S计时器01用于安全。</li><li>有两种操作模式：自由运行和用户定义的计数。</li><li>每个中断的映射。</li></ul><h3 id="_1-2-arm私有定时器" tabindex="-1"><a class="header-anchor" href="#_1-2-arm私有定时器" aria-hidden="true">#</a> 1.2 arm私有定时器</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>UINT32  armPrivateFreqGet(VOID);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取私有定时器频率</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VOID  armPrivateTimerStart (UINT32  uiComparator, BOOL  bEnable)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动私有定时器</p><ul><li>uiComparator：每次递增的比较数</li><li>bEnable：是否使能中断</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VOID    armPrivateTimerIntClear(VOID);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清除全局定时器中断</p><h3 id="_1-3-处理其外部定时器" tabindex="-1"><a class="header-anchor" href="#_1-3-处理其外部定时器" aria-hidden="true">#</a> 1.3 处理其外部定时器</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INT     timerInit(UINT32  uiTimeId, UINT32  uiHz, BOOL  bConMode);
INT     stimerInit(UINT32  uiTimeId, UINT32  uiHz, BOOL  bConMode);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化定时器</p><ul><li>uiTimeId：定时器编号</li><li>uiHz：定时器频率</li><li>bConMode：连续模式</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>VOID    timerClearirq(UINT32  uiTimeId);
VOID    stimerClearirq(UINT32  uiTimeId);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>清定时器中断标志</p><ul><li>uiTimeId：定时器编号</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>UINT32  timerCurGet (UINT32  uiTimeId)
UINT32  stimerCurGet(UINT32  uiTimeId);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取定时器当前计数值</p><ul><li>uiTimeId：定时器编号</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>UINT32  timerIrqStatusGet(UINT32  uiTimeId);
UINT32  stimerIrqStatusGet(UINT32  uiTimeId);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获取定时器中断状态</p><ul><li>uiTimeId：定时器编号</li></ul>`,28),t=[r];function n(s,u){return i(),a("div",null,t)}const v=e(l,[["render",n],["__file","timer.html.vue"]]);export{v as default};
