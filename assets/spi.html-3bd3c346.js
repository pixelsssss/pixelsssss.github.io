import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as s}from"./app-5974d0f8.js";const n={},d=s(`<h2 id="_1-spi使用" tabindex="-1"><a class="header-anchor" href="#_1-spi使用" aria-hidden="true">#</a> 1. SPI使用</h2><h3 id="_1-1-简介" tabindex="-1"><a class="header-anchor" href="#_1-1-简介" aria-hidden="true">#</a> 1.1 简介</h3><p>处理器支持 4 路 SPI 控制器。本文主要描述如何在该开发板上配置 SPI。</p><p>配置 SPI 可分为两大步骤：</p><ul><li>定义和注册 SPI 驱动</li><li>定义和注册 SPI 设备</li></ul><h3 id="_1-2-定义和注册-spi-总线驱动" tabindex="-1"><a class="header-anchor" href="#_1-2-定义和注册-spi-总线驱动" aria-hidden="true">#</a> 1.2 定义和注册 SPI 总线驱动</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PLW_SPI_FUNCS  rkSpiBusFuns(UINT32  uiChannel, UINT8  ucChipSelect);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>rkSpiBusFuns 函数用来获取 SPI 驱动函数接口</p><ul><li>uiChannel：控制器通道号</li><li>ucChipSelect：从机选择信号</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LW_API INT                   API_SpiAdapterCreate(CPCHAR           pcName, 
                                                  PLW_SPI_FUNCS    pspifunc);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>API_SpiAdapterCreate 用来注册 SPI 驱动</p><ul><li>pcAdapterName：适配器名称（总线）</li><li>pcDeviceName：操作函数组</li></ul><p>使用示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PLW_SPI_FUNCS  pSpiFuns;  

API_SpiLibInit();  

pSpiFuns = rkSpiBusFuns(3, 0);
API_SpiAdapterCreate(&quot;/bus/spi/3&quot;, pSpiFuns);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-定义和注册-spi-设备" tabindex="-1"><a class="header-anchor" href="#_1-3-定义和注册-spi-设备" aria-hidden="true">#</a> 1.3 定义和注册 SPI 设备</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LW_API PLW_SPI_DEVICE        API_SpiDeviceCreate(CPCHAR  pcAdapterName,
                                                 CPCHAR  pcDeviceName);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>API_SpiDeviceCreate 用来注册 SPI 设备</p><ul><li>pcAdapterName：适配器名称</li><li>pcDeviceName：设备名称</li></ul><h3 id="_1-4-通过-spi-收发数据" tabindex="-1"><a class="header-anchor" href="#_1-4-通过-spi-收发数据" aria-hidden="true">#</a> 1.4 通过 SPI 收发数据</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LW_API INT                   API_SpiDeviceTransfer(PLW_SPI_DEVICE   pspidevice, 
                                                   PLW_SPI_MESSAGE  pspimsg,
                                                   INT              iNum);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>API_SpiDeviceTransfer 用来通过 SPI 收发数据</p><ul><li>pspidevice：指定的 SPI 设备控制块（即 API_SpiDeviceCreate 函数返回值）</li><li>pspimsg：传输消息控制块组</li><li>iNum：控制消息组中消息的数量</li></ul>`,22),l=[d];function r(t,c){return i(),a("div",null,l)}const v=e(n,[["render",r],["__file","spi.html.vue"]]);export{v as default};
